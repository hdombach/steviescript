CODE = BLOCK
BLOCK = [STATEMENT]
STATEMENT = EPXRESSION | IF | SET | POINTERSET | WHILE | FOR | DEFFUNC | CREATEVAR | CREATECONST | DEFSTRUCT | CREATESTRUCT | CALLSTRUCT

EXPRESSION = OPERATION | '(' + EXPRESSION +')' | value | CREATESTRUCT | VARIABLENAME | CALLFUNC | CALLMETHOD
/*
    
*/

POINTERSET = "@" + EXPRESSION + "=" + EXPRESSION

CALLMETHOD = EXPRESSION + "." + name + PARAMS

PARAMS = "(" + ?EXPRESSION + ?["," + EXPRESSION] + ")"

DEFFUNC = "function" + functionName + "(" + [dataType + variableName] + ")" + ?("->" + dataType) + "{" + BLOCK + "}"
/*	
    function exampleFunction(type name, type name) -> returnType {
		<code>
	}
*/
 
IF = "if" + "(" + expression +  ")" + "{" + BLOCK + "}"
/*  
    if (boolean expression) {
        <code>
    }
*/

SET =  variableName + "=" + expression
/*  
    var = 0 
*/

WHILE = "while" + "(" + expression + ")" + "{" + BLOCK + "}"
/*
    while (boolean expression) {}
*/

FOR = "for" + "(" + CREATEVAR + "," + EXPRESSION + "," + SET + ")" + "(" + BLOCK + ")"
/*
    for(CREATEVAR, EXPRESSION, SET) {}
*/


CALLFUNC = functionName + PARAM
/*
    myFunction(a, b, c)
*/


OPERATION = EXPRESSION + operator + EXPRESSION

CREATEVAR = DATATYPE + variableName + "=" + expression
/*
    int var = 0
*/

CREATECONST = "const" + DATATYPE + variableName + "=" + expression
/*
    const int var = 0
*/

DEFSTRUCT = "struct" + DATATYPE + "{" + [CREATECONST | CREATEVAR] + "}"
/*
    struct myStruct {
    	int foo
        String bar
        boolean bat
    }

*/

CREATESTRUCT = DATATYPE + "(" + [EXPRESSION] + ")"
/*
    StructName(property: value)
*/


VALUE = NUMBER | BOOLEAN | 